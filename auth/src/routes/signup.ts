import express, { Request, Response } from 'express';
import { body } from 'express-validator';
import { User } from '../models/user';
import { BadRequestError } from '../errors/bad-request-error';
import { validateRequest } from '../middlewares/validate-request';
//This is a middleware that will validate the request body
import jwt from 'jsonwebtoken'; //Importing jwt to sign the token

const router = express.Router();

router.post(
  '/api/users/signup',
  [
    body('email').isEmail().withMessage('Email must be valid'),
    body('password')
      .trim()
      .isLength({ min: 4, max: 20 })
      .withMessage('Password must be between 4 and 20 characters'),
  ],
  validateRequest, //This is a middleware that will validate the request body
  //After that, we will define the route handler
  async (req: Request, res: Response) => {
    //After validation, we can create a new user
    //Before creating a user, we should check if the user already exists
    const { email, password } = req.body;
    const exisitingUser = await User.findOne({ email });

    if (exisitingUser) {
      throw new BadRequestError('User already exists'); //We throw an error if the user already exists
    }

    //If the user does not exist, Hash the password

    // Create a new user instance
    //Inside the User model, we have defined a build method that will create a new user instance
    //Before creating it will has hashed the password
    const user = User.build({ email, password });

    // Save the user to the database
    await user.save();

    // Respond with the user data using JWT
    //Inside JWT, we will include the email,ID generated by MongoDB to uniquely identify the user
    const userJwt = jwt.sign(
      {
        id: user.id,
        email: user.email,
      },
      process.env.JWT_KEY! //We use the JWT_KEY from the environment variables, the exclamation mark tells TypeScript that this will not be undefined
    );

    // Put JWT inside the cookie session objecr
    req.session = {
      jwt: userJwt, //W e set the jwt in the session
    };

    res.status(201).send(user); //201 is the status code for created
  }
);

export { router as signUpRouter };
//This is a named export, so we can import it in the index.ts file
